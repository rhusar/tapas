package com.radoslavhusar.tapas.ejb.solver;

dialect "java"

import org.drools.planner.core.score.calculator.HardAndSoftConstraintScoreCalculator;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import com.radoslavhusar.tapas.ejb.entity.Task
import com.radoslavhusar.tapas.ejb.entity.Resource

global HardAndSoftConstraintScoreCalculator scoreCalculator;

// ############################################################################
// Hard constraints
// ############################################################################ intValue != 0 $totalUnassigned.intValue()

/*rule "oneShiftPerDay"
    when
        $leftAssignment : Task($leftId : id, $resource : resource)
        $rightAssignment : Task(id > $leftId, resource == $resource)
    then
        insertLogical(new IntConstraintOccurrence("oneShiftPerDay", ConstraintType.NEGATIVE_HARD,
                1,
                $leftAssignment, $rightAssignment));
end*/

rule "insertEmployeeAssignmentTotal"
        salience 1 // Do these rules first (optional, for performance)
    when
       $task : Task(resource == null)
    
       /* $assignmentTotal : Number(intValue > 0) from accumulate(
            count($task)
        ) */
    then
        insertLogical(new IntConstraintOccurrence("insertEmployeeAssignmentTotal",
        ConstraintType.NEGATIVE_HARD, 
        1, $task));
end

/*
How much is allocated compared to what the load on the project is.
rule "insertAssignmentLoadTotal"
        salience 1 // Do these rules first (optional, improves performance)
    when
       $resource : Resource() // Take all resources on the project
       $task : Task(resource == $resource) // And his current tasks
    
       // Sum total allocation on total:
       $assignmentTotal : Number(intValue > 0) from accumulate(
            sum($task.allocation.Time)
        )

        // And divide by allocation on project + load
        $final : Number() from ... {$assignmentTotal}
    then
        insertLogical(new IntConstraintOccurrence("insertAssignmentLoadTotal",
        ConstraintType.NEGATIVE_HARD, 
        1, $task));
end
*/


// ############################################################################
// Soft constraints
// ############################################################################

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight)
        )
    then
        scoreCalculator.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum(- $weight)
        )
    then
        scoreCalculator.setSoftConstraintsBroken($softTotal.intValue());
end


